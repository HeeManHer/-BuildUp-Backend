<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.warmmingup.buildup.backlog.dao.BacklogMapper">


    <resultMap id="BacklogResultMap" type="com.warmmingup.buildup.backlog.dto.BacklogDTO">
        <id property="backlogNo" column="BACKLOG_NO"/>
        <result property="backlogName" column="BACKLOG_NAME"/>
        <result property="backlogContent" column="BACKLOG_CONTENT"/>
        <result property="backlogStatus" column="BACKLOG_STATUS"/>
        <result property="backlogPriority" column="BACKLOG_PRIORITY"/>
        <result property="projectNo" column="PROJECT_NO"/>
    </resultMap>

    <resultMap id="BacklogAuthority" type="com.warmmingup.buildup.backlog.dto.BacklogAuthorityDTO">
        <result property="projectNo" column="PROJECT_NO"/>
        <result property="employeeName" column="EMPLOYEE_NAME"/>
        <result property="roleNo" column="ROLE_NO"/>
        <result property="authorityState" column="AUTHORITY_STATE"/>
        <result property="employeeNo" column="EMPLOYEE_NO"/>
        <result property="typeNo" column="TYPE_NO"/>
    </resultMap>

    <!--백로그 내용 페이징처리-->
    <select id="selectAllBacklogs" parameterType="hashmap" resultMap="BacklogResultMap">
        SELECT
               B.BACKLOG_NO
             , B.BACKLOG_NAME
             , B.BACKLOG_CONTENT
             , B.BACKLOG_PRIORITY
             , B.BACKLOG_STATUS
             , B.PROJECT_NO
          FROM ( SELECT A.*
                      , ROWNUM R
                   FROM ( SELECT *
                            FROM BACKLOG
                           WHERE PROJECT_NO = #{projectNo}
                        <if test="searchValue != null">
                            AND ( BACKLOG_NAME LIKE #{searchValue}
                               OR BACKLOG_CONTENT LIKE #{searchValue}
                               OR BACKLOG_PRIORITY LIKE #{searchValue}
                               OR BACKLOG_STATUS LIKE #{searchValue}
                            )
                        </if>
                           ORDER BY BACKLOG_NO ASC
                ) A
        ) B
        WHERE B.R BETWEEN #{pageInfo.startRow} AND #{pageInfo.endRow}
    </select>

    <!--페이징 총페이지 계산-->
    <select id="selectBacklogTotalCount" resultType="_int" parameterType="hashmap">

        SELECT COUNT(*)
          FROM BACKLOG
         WHERE PROJECT_NO = ${projectNo}
        <if test="searchValue != null">
            AND ( BACKLOG_NAME LIKE #{searchValue}
               OR BACKLOG_CONTENT LIKE #{searchValue}
               OR BACKLOG_PRIORITY LIKE #{searchValue}
               OR BACKLOG_STATUS LIKE #{searchValue}
            )
        </if>
         ORDER BY BACKLOG_NO ASC
    </select>

    <!--시퀀스 백로그번호 찾기-->
    <select id="selectBacklogsNo" resultType="_int">
        SELECT SEQ_BACKLOG_NO.CURRVAL
          FROM DUAL

    </select>
    <!--추가-->
    <insert id="insertBacklog" parameterType="com.warmmingup.buildup.backlog.dto.BacklogDTO">
        INSERT INTO BACKLOG
        (
          BACKLOG_NO
        , BACKLOG_NAME
        , BACKLOG_CONTENT
        , BACKLOG_STATUS
        , BACKLOG_PRIORITY
        , PROJECT_NO
        )
        VALUES
        (
          SEQ_BACKLOG_NO.NEXTVAL
        , #{backlogName}
        , #{backlogContent}
        , #{backlogStatus}
        , #{backlogPriority}
        , #{projectNo}
        )

    </insert>
        <!--수정-->
    <update id="updateBacklogs" parameterType="com.warmmingup.buildup.backlog.dto.BacklogDTO">
        UPDATE BACKLOG
           SET
               BACKLOG_NAME = #{backlogName}
             , BACKLOG_CONTENT = #{backlogContent}
             , BACKLOG_STATUS = #{backlogStatus}
             , BACKLOG_PRIORITY = #{backlogPriority}
             , PROJECT_NO = #{projectNo}
         WHERE BACKLOG_NO = #{backlogNo}
    </update>
    <!--삭제-->
    <delete id="deleteBacklog" parameterType="_int">
       DELETE FROM BACKLOG
        WHERE BACKLOG_NO = #{backlogNo}
    </delete>

        <!--권한 조회 -->
    <select id="authority" parameterType="hashmap" resultMap="BacklogAuthority">
        SELECT PE.PROJECT_NO
             , E.EMPLOYEE_NAME
             , R.ROLE_NO
             , T.TYPE_NAME
             , A.AUTHORITY_STATE
             , E.EMPLOYEE_NO,A.TYPE_NO
          FROM PROJECT_EMPLOYEE PE
          JOIN EMPLOYEE E ON (pe.EMPLOYEE_NO = e.EMPLOYEE_NO)
          JOIN ROLE_AUTHORITY_TYPE R ON (PE.ROLE_NO = R.ROLE_NO)
          JOIN AUTHORITY A ON (R.AUTHORITY_NO = A.AUTHORITY_NO)
          JOIN AUTHORITY_TYPE T ON (A.TYPE_NO=T.TYPE_NO)
         WHERE PE.PROJECT_NO = #{projectNo}
           AND E.EMPLOYEE_NO=#{employeeNo}
    </select>



</mapper>